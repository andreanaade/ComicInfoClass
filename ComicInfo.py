#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys

try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_

Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    pass
    # BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, doRecover=False, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser(recover=doRecover)
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser(recover=doRecover)
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element


#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))

#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass


    # noinspection PyCompatibility,PyUnboundLocalVariable
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': None,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    setattr(settings[n], self[n])
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')

        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)

        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival

        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value

        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)

        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % float(input_data)).rstrip('0')

        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_

        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value

        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)

        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values

        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value

        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError, decimal_.InvalidOperation):
                if input_data in ("None", "none",):
                    return 0
                # raise_parse_error(node, 'Requires decimal value')
            try:
                int(input_data)
            except ValueError:
                return 0
            return decimal_value

        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value

        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])

        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values

        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data

        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_

        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value

        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)

        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval

        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0,):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)

        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0,):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"),)
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None:
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))

        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))

        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')

            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))

        def __ne__(self, other):
            return not self.__eq__(other)

        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass

        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass

        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None

        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass

        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""


    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None


#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name,))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline,)
    raise GDSParseError(msg)


# noinspection PyUnboundLocalVariable
class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))

    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
              self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
              self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
                 optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional

    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def set_data_type(self, data_type):
        self.data_type = data_type

    def get_data_type_chain(self):
        return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container):
        self.container = container

    def get_container(self):
        return self.container

    def set_child_attrs(self, child_attrs):
        self.child_attrs = child_attrs

    def get_child_attrs(self):
        return self.child_attrs

    def set_choice(self, choice):
        self.choice = choice

    def get_choice(self):
        return self.choice

    def set_optional(self, optional):
        self.optional = optional

    def get_optional(self):
        return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Data representation classes.
#


class AgeRating(str, Enum):
    UNKNOWN = 'Unknown'
    ADULTS_ONLY_18 = 'Adults Only 18+'
    EARLY_CHILDHOOD = 'Early Childhood'
    EVERYONE = 'Everyone'
    EVERYONE_10 = 'Everyone 10+'
    G = 'G'
    KIDSTO_ADULTS = 'Kids to Adults'
    M = 'M'
    MA_15 = 'MA 15+'
    MATURE_17 = 'Mature 17+'
    PG = 'PG'
    R_18 = 'R18+'
    RATING_PENDING = 'Rating Pending'
    TEEN = 'Teen'
    X_18 = 'X18+'

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))

class ComicPageType(str, Enum):
    FRONT_COVER='FrontCover'
    INNER_COVER='InnerCover'
    ROUNDUP='Roundup'
    STORY='Story'
    ADVERTISMENT='Advertisment'
    EDITORIAL='Editorial'
    LETTERS='Letters'
    PREVIEW='Preview'
    BACK_COVER='BackCover'
    OTHER='Other'
    DELETED='Deleted'
    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))


class Manga(str, Enum):
    UNKNOWN='Unknown'
    NO='No'
    YES='Yes'
    YES_AND_RIGHT_TO_LEFT='YesAndRightToLeft'
    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))

class YesNo(str, Enum):
    UNKNOWN='Unknown'
    NO='No'
    YES='Yes'
    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))

class ComicInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Title='', Series='', Number='', Count=-1, Volume=-1, AlternateSeries='', SeriesSort='',
                 LocalizedSeries='', AlternateNumber='', AlternateCount=-1, Summary='', Notes='', Year=-1, Month=-1,
                 Day=-1, Writer='', Penciller='', Inker='', Colorist='', Letterer='', CoverArtist='', Editor='',
                 Translator='', Publisher='', Imprint='', Genre='', Tags='', Web='', PageCount=0, LanguageISO='',
                 Format='', BlackAndWhite='Unknown', Manga='Unknown', Characters='', Teams='', Locations='',
                 ScanInformation='', StoryArc='', StoryArcNumber='', SeriesGroup='', AgeRating='Unknown', Pages=None,
                 CommunityRating='', gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.Series = Series
        self.Series_nsprefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
        self.Volume = Volume
        self.Volume_nsprefix_ = None
        self.AlternateSeries = AlternateSeries
        self.AlternateSeries_nsprefix_ = None
        self.SeriesSort = SeriesSort
        self.SeriesSort_nsprefix_ = None
        self.LocalizedSeries = LocalizedSeries
        self.LocalizedSeries_nsprefix_ = None
        self.AlternateNumber = AlternateNumber
        self.AlternateNumber_nsprefix_ = None
        self.AlternateCount = AlternateCount
        self.AlternateCount_nsprefix_ = None
        self.Summary = Summary
        self.Summary_nsprefix_ = None
        self.Notes = Notes
        self.Notes_nsprefix_ = None
        self.Year = Year
        self.Year_nsprefix_ = None
        self.Month = Month
        self.Month_nsprefix_ = None
        self.Day = Day
        self.Day_nsprefix_ = None
        self.Writer = Writer
        self.Writer_nsprefix_ = None
        self.Penciller = Penciller
        self.Penciller_nsprefix_ = None
        self.Inker = Inker
        self.Inker_nsprefix_ = None
        self.Colorist = Colorist
        self.Colorist_nsprefix_ = None
        self.Letterer = Letterer
        self.Letterer_nsprefix_ = None
        self.CoverArtist = CoverArtist
        self.CoverArtist_nsprefix_ = None
        self.Editor = Editor
        self.Editor_nsprefix_ = None
        self.Translator = Translator
        self.Translator_nsprefix_ = None
        self.Publisher = Publisher
        self.Publisher_nsprefix_ = None
        self.Imprint = Imprint
        self.Imprint_nsprefix_ = None
        self.Genre = Genre
        self.Genre_nsprefix_ = None
        self.Tags = Tags
        self.Tags_nsprefix_ = None
        self.Web = Web
        self.Web_nsprefix_ = None
        self.PageCount = PageCount
        self.PageCount_nsprefix_ = None
        self.LanguageISO = LanguageISO
        self.LanguageISO_nsprefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.BlackAndWhite = BlackAndWhite
        self.validate_YesNo(self.BlackAndWhite)
        self.BlackAndWhite_nsprefix_ = None
        self.Manga = Manga
        self.validate_Manga(self.Manga)
        self.Manga_nsprefix_ = None
        self.Characters = Characters
        self.Characters_nsprefix_ = None
        self.Teams = Teams
        self.Teams_nsprefix_ = None
        self.Locations = Locations
        self.Locations_nsprefix_ = None
        self.ScanInformation = ScanInformation
        self.ScanInformation_nsprefix_ = None
        self.StoryArc = StoryArc
        self.StoryArc_nsprefix_ = None
        self.StoryArcNumber = StoryArcNumber
        self.StoryArcNumber_nsprefix_ = None
        self.SeriesGroup = SeriesGroup
        self.SeriesGroup_nsprefix_ = None
        self.AgeRating = AgeRating
        self.validate_AgeRating(self.AgeRating)
        self.AgeRating_nsprefix_ = None
        self.Pages = Pages
        self.Pages_nsprefix_ = None
        self.CommunityRating = CommunityRating
        self.validate_Rating(self.CommunityRating)
        self.CommunityRating_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComicInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComicInfo.subclass:
            return ComicInfo.subclass(*args_, **kwargs_)
        else:
            return ComicInfo(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Title(self):
        return self.Title

    def set_Title(self, Title):
        self.Title = Title

    def get_Series(self):
        return self.Series

    def set_Series(self, Series):
        self.Series = Series

    def get_Number(self):
        return self.Number

    def set_Number(self, Number):
        self.Number = Number

    def get_Count(self):
        return self.Count

    def set_Count(self, Count):
        self.Count = Count

    def get_Volume(self):
        return self.Volume

    def set_Volume(self, Volume):
        self.Volume = Volume

    def get_AlternateSeries(self):
        return self.AlternateSeries

    def set_AlternateSeries(self, AlternateSeries):
        self.AlternateSeries = AlternateSeries

    def get_SeriesSort(self):
        return self.SeriesSort

    def set_SeriesSort(self, SeriesSort):
        self.SeriesSort = SeriesSort

    def get_LocalizedSeries(self):
        return self.LocalizedSeries

    def set_LocalizedSeries(self, LocalizedSeries):
        self.LocalizedSeries = LocalizedSeries

    def get_AlternateNumber(self):
        return self.AlternateNumber

    def set_AlternateNumber(self, AlternateNumber):
        self.AlternateNumber = AlternateNumber

    def get_AlternateCount(self):
        return self.AlternateCount

    def set_AlternateCount(self, AlternateCount):
        self.AlternateCount = AlternateCount

    def get_Summary(self):
        return self.Summary

    def set_Summary(self, Summary):
        self.Summary = Summary

    def get_Notes(self):
        return self.Notes

    def set_Notes(self, Notes):
        self.Notes = Notes

    def get_Year(self):
        return self.Year

    def set_Year(self, Year):
        self.Year = Year

    def get_Month(self):
        return self.Month

    def set_Month(self, Month):
        self.Month = Month

    def get_Day(self):
        return self.Day

    def set_Day(self, Day):
        self.Day = Day

    def get_Writer(self):
        return self.Writer

    def set_Writer(self, Writer):
        self.Writer = Writer

    def get_Penciller(self):
        return self.Penciller

    def set_Penciller(self, Penciller):
        self.Penciller = Penciller

    def get_Inker(self):
        return self.Inker

    def set_Inker(self, Inker):
        self.Inker = Inker

    def get_Colorist(self):
        return self.Colorist

    def set_Colorist(self, Colorist):
        self.Colorist = Colorist

    def get_Letterer(self):
        return self.Letterer

    def set_Letterer(self, Letterer):
        self.Letterer = Letterer

    def get_CoverArtist(self):
        return self.CoverArtist

    def set_CoverArtist(self, CoverArtist):
        self.CoverArtist = CoverArtist

    def get_Editor(self):
        return self.Editor

    def set_Editor(self, Editor):
        self.Editor = Editor

    def get_Translator(self):
        return self.Translator

    def set_Translator(self, Translator):
        self.Translator = Translator

    def get_Publisher(self):
        return self.Publisher

    def set_Publisher(self, Publisher):
        self.Publisher = Publisher

    def get_Imprint(self):
        return self.Imprint

    def set_Imprint(self, Imprint):
        self.Imprint = Imprint

    def get_Genre(self):
        return self.Genre

    def set_Genre(self, Genre):
        self.Genre = Genre

    def get_Tags(self):
        return self.Tags

    def set_Tags(self, Tags):
        self.Tags = Tags

    def get_Web(self):
        return self.Web

    def set_Web(self, Web):
        self.Web = Web

    def get_PageCount(self):
        return self.PageCount

    def set_PageCount(self, PageCount):
        self.PageCount = PageCount

    def get_LanguageISO(self):
        return self.LanguageISO

    def set_LanguageISO(self, LanguageISO):
        self.LanguageISO = LanguageISO

    def get_Format(self):
        return self.Format

    def set_Format(self, Format):
        self.Format = Format

    def get_BlackAndWhite(self):
        return self.BlackAndWhite

    def set_BlackAndWhite(self, BlackAndWhite):
        self.BlackAndWhite = BlackAndWhite

    def get_Manga(self):
        return self.Manga

    def set_Manga(self, Manga):
        self.Manga = Manga

    def get_Characters(self):
        return self.Characters

    def set_Characters(self, Characters):
        self.Characters = Characters

    def get_Teams(self):
        return self.Teams

    def set_Teams(self, Teams):
        self.Teams = Teams

    def get_Locations(self):
        return self.Locations

    def set_Locations(self, Locations):
        self.Locations = Locations

    def get_ScanInformation(self):
        return self.ScanInformation

    def set_ScanInformation(self, ScanInformation):
        self.ScanInformation = ScanInformation

    def get_StoryArc(self):
        return self.StoryArc

    def set_StoryArc(self, StoryArc):
        self.StoryArc = StoryArc

    def get_StoryArcNumber(self):
        return self.StoryArcNumber

    def set_StoryArcNumber(self, StoryArcNumber):
        self.StoryArcNumber = StoryArcNumber

    def get_SeriesGroup(self):
        return self.SeriesGroup

    def set_SeriesGroup(self, SeriesGroup):
        self.SeriesGroup = SeriesGroup

    def get_AgeRating(self):
        return self.AgeRating

    def set_AgeRating(self, AgeRating):
        self.AgeRating = AgeRating

    def get_Pages(self):
        return self.Pages

    def set_Pages(self, Pages):
        self.Pages = Pages

    def get_CommunityRating(self):
        return self.CommunityRating

    def set_CommunityRating(self, CommunityRating):
        self.CommunityRating = CommunityRating

    def validate_YesNo(self, value):
        result = True
        # Validate type YesNo, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value,
                                                                                                  "lineno": lineno, })
                return False
            value = value
            enumerations = ['Unknown', 'No', 'Yes']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on YesNo' % {
                        "value": encode_str_2_3(value), "lineno": lineno})
                result = False
        return result

    def validate_Manga(self, value):
        result = True
        # Validate type Manga, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value,
                                                                                                  "lineno": lineno, })
                return False
            value = value
            enumerations = ['Unknown', 'No', 'Yes', 'YesAndRightToLeft']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Manga' % {
                        "value": encode_str_2_3(value), "lineno": lineno})
                result = False
        return result

    def validate_AgeRating(self, value):
        result = True
        # Validate type AgeRating, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value,
                                                                                                  "lineno": lineno, })
                return False
            value = value
            enumerations = ['Unknown', 'Adults Only 18+', 'Early Childhood', 'Everyone', 'Everyone 10+', 'G',
                            'Kids to Adults', 'M', 'MA 15+', 'Mature 17+', 'PG', 'R18+', 'Rating Pending', 'Teen',
                            'X18+']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AgeRating' % {
                        "value": encode_str_2_3(value), "lineno": lineno})
                result = False
        return result

    def validate_Rating(self, value):
        result = True
        # Validate type Rating, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {
                        "value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Rating' % {
                        "value": value, "lineno": lineno})
                result = False
            if value > 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on Rating' % {
                        "value": value, "lineno": lineno})
                result = False
        return result

    def _hasContent(self):
        if (
                self.Title != "" or
                self.Series != "" or
                self.Number != "" or
                self.Count != -1 or
                self.Volume != -1 or
                self.AlternateSeries != "" or
                self.SeriesSort != "" or
                self.LocalizedSeries != "" or
                self.AlternateNumber != "" or
                self.AlternateCount != -1 or
                self.Summary != "" or
                self.Notes != "" or
                self.Year != -1 or
                self.Month != -1 or
                self.Day != -1 or
                self.Writer != "" or
                self.Penciller != "" or
                self.Inker != "" or
                self.Colorist != "" or
                self.Letterer != "" or
                self.CoverArtist != "" or
                self.Editor != "" or
                self.Translator != "" or
                self.Publisher != "" or
                self.Imprint != "" or
                self.Genre != "" or
                self.Tags != "" or
                self.Web != "" or
                self.PageCount != 0 or
                self.LanguageISO != "" or
                self.Format != "" or
                self.BlackAndWhite != "Unknown" or
                self.Manga != "Unknown" or
                self.Characters != "" or
                self.Teams != "" or
                self.Locations != "" or
                self.ScanInformation != "" or
                self.StoryArc != "" or
                self.StoryArcNumber != "" or
                self.SeriesGroup != "" or
                self.AgeRating != "Unknown" or
                self.Pages is not None or
                self.CommunityRating != ""
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ComicInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ComicInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ComicInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ComicInfo')
        if self._hasContent():
            outfile.write('>%s' % (eol_,))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ComicInfo',
                                 pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ComicInfo'):
        pass

    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ComicInfo',
                        fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Title != "":
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')),
                namespaceprefix_, eol_))
        if self.Series != "":
            namespaceprefix_ = self.Series_nsprefix_ + ':' if (UseCapturedNS_ and self.Series_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeries>%s</%sSeries>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Series), input_name='Series')),
                namespaceprefix_, eol_))
        if self.Number != "":
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')),
                namespaceprefix_, eol_))
        if self.Count != -1:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (
                namespaceprefix_, self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_, eol_))
        if self.Volume != -1:
            namespaceprefix_ = self.Volume_nsprefix_ + ':' if (UseCapturedNS_ and self.Volume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolume>%s</%sVolume>%s' % (
                namespaceprefix_, self.gds_format_integer(self.Volume, input_name='Volume'), namespaceprefix_, eol_))
        if self.AlternateSeries != "":
            namespaceprefix_ = self.AlternateSeries_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.AlternateSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlternateSeries>%s</%sAlternateSeries>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.AlternateSeries), input_name='AlternateSeries')),
                                                                           namespaceprefix_, eol_))
        if self.SeriesSort != "":
            namespaceprefix_ = self.SeriesSort_nsprefix_ + ':' if (UseCapturedNS_ and self.SeriesSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeriesSort>%s</%sSeriesSort>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.SeriesSort), input_name='SeriesSort')), namespaceprefix_, eol_))
        if self.LocalizedSeries != "":
            namespaceprefix_ = self.LocalizedSeries_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.LocalizedSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalizedSeries>%s</%sLocalizedSeries>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.LocalizedSeries), input_name='LocalizedSeries')),
                                                                           namespaceprefix_, eol_))
        if self.AlternateNumber != "":
            namespaceprefix_ = self.AlternateNumber_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.AlternateNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlternateNumber>%s</%sAlternateNumber>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.AlternateNumber), input_name='AlternateNumber')),
                                                                           namespaceprefix_, eol_))
        if self.AlternateCount != -1:
            namespaceprefix_ = self.AlternateCount_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.AlternateCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlternateCount>%s</%sAlternateCount>%s' % (
                namespaceprefix_, self.gds_format_integer(self.AlternateCount, input_name='AlternateCount'),
                namespaceprefix_, eol_))
        if self.Summary != "":
            namespaceprefix_ = self.Summary_nsprefix_ + ':' if (UseCapturedNS_ and self.Summary_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSummary>%s</%sSummary>%s' % (
                namespaceprefix_,
                self.gds_encode(self.gds_format_string(quote_xml(self.Summary), input_name='Summary')),
                namespaceprefix_, eol_))
        if self.Notes != "":
            namespaceprefix_ = self.Notes_nsprefix_ + ':' if (UseCapturedNS_ and self.Notes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Notes), input_name='Notes')),
                namespaceprefix_, eol_))
        if self.Year != -1:
            namespaceprefix_ = self.Year_nsprefix_ + ':' if (UseCapturedNS_ and self.Year_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYear>%s</%sYear>%s' % (
                namespaceprefix_, self.gds_format_integer(self.Year, input_name='Year'), namespaceprefix_, eol_))
        if self.Month != -1:
            namespaceprefix_ = self.Month_nsprefix_ + ':' if (UseCapturedNS_ and self.Month_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonth>%s</%sMonth>%s' % (
                namespaceprefix_, self.gds_format_integer(self.Month, input_name='Month'), namespaceprefix_, eol_))
        if self.Day != -1:
            namespaceprefix_ = self.Day_nsprefix_ + ':' if (UseCapturedNS_ and self.Day_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDay>%s</%sDay>%s' % (
                namespaceprefix_, self.gds_format_integer(self.Day, input_name='Day'), namespaceprefix_, eol_))
        if self.Writer != "":
            namespaceprefix_ = self.Writer_nsprefix_ + ':' if (UseCapturedNS_ and self.Writer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWriter>%s</%sWriter>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Writer), input_name='Writer')),
                namespaceprefix_, eol_))
        if self.Penciller != "":
            namespaceprefix_ = self.Penciller_nsprefix_ + ':' if (UseCapturedNS_ and self.Penciller_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPenciller>%s</%sPenciller>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.Penciller), input_name='Penciller')), namespaceprefix_, eol_))
        if self.Inker != "":
            namespaceprefix_ = self.Inker_nsprefix_ + ':' if (UseCapturedNS_ and self.Inker_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInker>%s</%sInker>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Inker), input_name='Inker')),
                namespaceprefix_, eol_))
        if self.Colorist != "":
            namespaceprefix_ = self.Colorist_nsprefix_ + ':' if (UseCapturedNS_ and self.Colorist_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorist>%s</%sColorist>%s' % (
                namespaceprefix_,
                self.gds_encode(self.gds_format_string(quote_xml(self.Colorist), input_name='Colorist')),
                namespaceprefix_, eol_))
        if self.Letterer != "":
            namespaceprefix_ = self.Letterer_nsprefix_ + ':' if (UseCapturedNS_ and self.Letterer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLetterer>%s</%sLetterer>%s' % (
                namespaceprefix_,
                self.gds_encode(self.gds_format_string(quote_xml(self.Letterer), input_name='Letterer')),
                namespaceprefix_, eol_))
        if self.CoverArtist != "":
            namespaceprefix_ = self.CoverArtist_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.CoverArtist_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoverArtist>%s</%sCoverArtist>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.CoverArtist), input_name='CoverArtist')), namespaceprefix_, eol_))
        if self.Editor != "":
            namespaceprefix_ = self.Editor_nsprefix_ + ':' if (UseCapturedNS_ and self.Editor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditor>%s</%sEditor>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Editor), input_name='Editor')),
                namespaceprefix_, eol_))
        if self.Translator != "":
            namespaceprefix_ = self.Translator_nsprefix_ + ':' if (UseCapturedNS_ and self.Translator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTranslator>%s</%sTranslator>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.Translator), input_name='Translator')), namespaceprefix_, eol_))
        if self.Publisher != "":
            namespaceprefix_ = self.Publisher_nsprefix_ + ':' if (UseCapturedNS_ and self.Publisher_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublisher>%s</%sPublisher>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.Publisher), input_name='Publisher')), namespaceprefix_, eol_))
        if self.Imprint != "":
            namespaceprefix_ = self.Imprint_nsprefix_ + ':' if (UseCapturedNS_ and self.Imprint_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImprint>%s</%sImprint>%s' % (
                namespaceprefix_,
                self.gds_encode(self.gds_format_string(quote_xml(self.Imprint), input_name='Imprint')),
                namespaceprefix_, eol_))
        if self.Genre != "":
            namespaceprefix_ = self.Genre_nsprefix_ + ':' if (UseCapturedNS_ and self.Genre_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGenre>%s</%sGenre>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Genre), input_name='Genre')),
                namespaceprefix_, eol_))
        if self.Tags != "":
            namespaceprefix_ = self.Tags_nsprefix_ + ':' if (UseCapturedNS_ and self.Tags_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTags>%s</%sTags>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Tags), input_name='Tags')),
                namespaceprefix_, eol_))
        if self.Web != "":
            namespaceprefix_ = self.Web_nsprefix_ + ':' if (UseCapturedNS_ and self.Web_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeb>%s</%sWeb>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Web), input_name='Web')),
                namespaceprefix_, eol_))
        if self.PageCount != 0:
            namespaceprefix_ = self.PageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPageCount>%s</%sPageCount>%s' % (
                namespaceprefix_, self.gds_format_integer(self.PageCount, input_name='PageCount'), namespaceprefix_,
                eol_))
        if self.LanguageISO != "":
            namespaceprefix_ = self.LanguageISO_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.LanguageISO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageISO>%s</%sLanguageISO>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.LanguageISO), input_name='LanguageISO')), namespaceprefix_, eol_))
        if self.Format != "":
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')),
                namespaceprefix_, eol_))
        if self.BlackAndWhite != "Unknown":
            namespaceprefix_ = self.BlackAndWhite_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.BlackAndWhite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBlackAndWhite>%s</%sBlackAndWhite>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.BlackAndWhite), input_name='BlackAndWhite')), namespaceprefix_,
                                                                       eol_))
        if self.Manga != "Unknown":
            namespaceprefix_ = self.Manga_nsprefix_ + ':' if (UseCapturedNS_ and self.Manga_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManga>%s</%sManga>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Manga), input_name='Manga')),
                namespaceprefix_, eol_))
        if self.Characters != "":
            namespaceprefix_ = self.Characters_nsprefix_ + ':' if (UseCapturedNS_ and self.Characters_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCharacters>%s</%sCharacters>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.Characters), input_name='Characters')), namespaceprefix_, eol_))
        if self.Teams != "":
            namespaceprefix_ = self.Teams_nsprefix_ + ':' if (UseCapturedNS_ and self.Teams_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTeams>%s</%sTeams>%s' % (
                namespaceprefix_, self.gds_encode(self.gds_format_string(quote_xml(self.Teams), input_name='Teams')),
                namespaceprefix_, eol_))
        if self.Locations != "":
            namespaceprefix_ = self.Locations_nsprefix_ + ':' if (UseCapturedNS_ and self.Locations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocations>%s</%sLocations>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.Locations), input_name='Locations')), namespaceprefix_, eol_))
        if self.ScanInformation != "":
            namespaceprefix_ = self.ScanInformation_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.ScanInformation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScanInformation>%s</%sScanInformation>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.ScanInformation), input_name='ScanInformation')),
                                                                           namespaceprefix_, eol_))
        if self.StoryArc != "":
            namespaceprefix_ = self.StoryArc_nsprefix_ + ':' if (UseCapturedNS_ and self.StoryArc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStoryArc>%s</%sStoryArc>%s' % (
                namespaceprefix_,
                self.gds_encode(self.gds_format_string(quote_xml(self.StoryArc), input_name='StoryArc')),
                namespaceprefix_, eol_))
        if self.StoryArcNumber != "":
            namespaceprefix_ = self.StoryArcNumber_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.StoryArcNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStoryArcNumber>%s</%sStoryArcNumber>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.StoryArcNumber), input_name='StoryArcNumber')), namespaceprefix_,
                                                                         eol_))
        if self.SeriesGroup != "":
            namespaceprefix_ = self.SeriesGroup_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.SeriesGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeriesGroup>%s</%sSeriesGroup>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.SeriesGroup), input_name='SeriesGroup')), namespaceprefix_, eol_))
        if self.AgeRating != "Unknown":
            namespaceprefix_ = self.AgeRating_nsprefix_ + ':' if (UseCapturedNS_ and self.AgeRating_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgeRating>%s</%sAgeRating>%s' % (namespaceprefix_, self.gds_encode(
                self.gds_format_string(quote_xml(self.AgeRating), input_name='AgeRating')), namespaceprefix_, eol_))
        if self.Pages is not None:
            namespaceprefix_ = self.Pages_nsprefix_ + ':' if (UseCapturedNS_ and self.Pages_nsprefix_) else ''
            self.Pages.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Pages',
                              pretty_print=pretty_print)
        if self.CommunityRating != "":
            namespaceprefix_ = self.CommunityRating_nsprefix_ + ':' if (
                    UseCapturedNS_ and self.CommunityRating_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommunityRating>%s</%sCommunityRating>%s' % (
                namespaceprefix_, self.gds_format_decimal(self.CommunityRating, input_name='CommunityRating'),
                namespaceprefix_, eol_))

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def _buildAttributes(self, node, attrs, already_processed):
        pass

    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'Series':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Series')
            value_ = self.gds_validate_string(value_, node, 'Series')
            self.Series = value_
            self.Series_nsprefix_ = child_.prefix
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
        elif nodeName_ == 'Volume' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Volume')
            ival_ = self.gds_validate_integer(ival_, node, 'Volume')
            self.Volume = ival_
            self.Volume_nsprefix_ = child_.prefix
        elif nodeName_ == 'AlternateSeries':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlternateSeries')
            value_ = self.gds_validate_string(value_, node, 'AlternateSeries')
            self.AlternateSeries = value_
            self.AlternateSeries_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeriesSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SeriesSort')
            value_ = self.gds_validate_string(value_, node, 'SeriesSort')
            self.SeriesSort = value_
            self.SeriesSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalizedSeries':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalizedSeries')
            value_ = self.gds_validate_string(value_, node, 'LocalizedSeries')
            self.LocalizedSeries = value_
            self.LocalizedSeries_nsprefix_ = child_.prefix
        elif nodeName_ == 'AlternateNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlternateNumber')
            value_ = self.gds_validate_string(value_, node, 'AlternateNumber')
            self.AlternateNumber = value_
            self.AlternateNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AlternateCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AlternateCount')
            ival_ = self.gds_validate_integer(ival_, node, 'AlternateCount')
            self.AlternateCount = ival_
            self.AlternateCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Summary':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Summary')
            value_ = self.gds_validate_string(value_, node, 'Summary')
            self.Summary = value_
            self.Summary_nsprefix_ = child_.prefix
        elif nodeName_ == 'Notes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Notes')
            value_ = self.gds_validate_string(value_, node, 'Notes')
            self.Notes = value_
            self.Notes_nsprefix_ = child_.prefix
        elif nodeName_ == 'Year' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Year')
            ival_ = self.gds_validate_integer(ival_, node, 'Year')
            self.Year = ival_
            self.Year_nsprefix_ = child_.prefix
        elif nodeName_ == 'Month' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Month')
            ival_ = self.gds_validate_integer(ival_, node, 'Month')
            self.Month = ival_
            self.Month_nsprefix_ = child_.prefix
        elif nodeName_ == 'Day' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Day')
            ival_ = self.gds_validate_integer(ival_, node, 'Day')
            self.Day = ival_
            self.Day_nsprefix_ = child_.prefix
        elif nodeName_ == 'Writer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Writer')
            value_ = self.gds_validate_string(value_, node, 'Writer')
            self.Writer = value_
            self.Writer_nsprefix_ = child_.prefix
        elif nodeName_ == 'Penciller':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Penciller')
            value_ = self.gds_validate_string(value_, node, 'Penciller')
            self.Penciller = value_
            self.Penciller_nsprefix_ = child_.prefix
        elif nodeName_ == 'Inker':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Inker')
            value_ = self.gds_validate_string(value_, node, 'Inker')
            self.Inker = value_
            self.Inker_nsprefix_ = child_.prefix
        elif nodeName_ == 'Colorist':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Colorist')
            value_ = self.gds_validate_string(value_, node, 'Colorist')
            self.Colorist = value_
            self.Colorist_nsprefix_ = child_.prefix
        elif nodeName_ == 'Letterer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Letterer')
            value_ = self.gds_validate_string(value_, node, 'Letterer')
            self.Letterer = value_
            self.Letterer_nsprefix_ = child_.prefix
        elif nodeName_ == 'CoverArtist':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CoverArtist')
            value_ = self.gds_validate_string(value_, node, 'CoverArtist')
            self.CoverArtist = value_
            self.CoverArtist_nsprefix_ = child_.prefix
        elif nodeName_ == 'Editor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Editor')
            value_ = self.gds_validate_string(value_, node, 'Editor')
            self.Editor = value_
            self.Editor_nsprefix_ = child_.prefix
        elif nodeName_ == 'Translator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Translator')
            value_ = self.gds_validate_string(value_, node, 'Translator')
            self.Translator = value_
            self.Translator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Publisher':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Publisher')
            value_ = self.gds_validate_string(value_, node, 'Publisher')
            self.Publisher = value_
            self.Publisher_nsprefix_ = child_.prefix
        elif nodeName_ == 'Imprint':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Imprint')
            value_ = self.gds_validate_string(value_, node, 'Imprint')
            self.Imprint = value_
            self.Imprint_nsprefix_ = child_.prefix
        elif nodeName_ == 'Genre':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Genre')
            value_ = self.gds_validate_string(value_, node, 'Genre')
            self.Genre = value_
            self.Genre_nsprefix_ = child_.prefix
        elif nodeName_ == 'Tags':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Tags')
            value_ = self.gds_validate_string(value_, node, 'Tags')
            self.Tags = value_
            self.Tags_nsprefix_ = child_.prefix
        elif nodeName_ == 'Web':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Web')
            value_ = self.gds_validate_string(value_, node, 'Web')
            self.Web = value_
            self.Web_nsprefix_ = child_.prefix
        elif nodeName_ == 'PageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PageCount')
            ival_ = self.gds_validate_integer(ival_, node, 'PageCount')
            self.PageCount = ival_
            self.PageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'LanguageISO':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LanguageISO')
            value_ = self.gds_validate_string(value_, node, 'LanguageISO')
            self.LanguageISO = value_
            self.LanguageISO_nsprefix_ = child_.prefix
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'BlackAndWhite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BlackAndWhite')
            value_ = self.gds_validate_string(value_, node, 'BlackAndWhite')
            self.BlackAndWhite = value_
            self.BlackAndWhite_nsprefix_ = child_.prefix
            # validate type YesNo
            self.validate_YesNo(self.BlackAndWhite)
        elif nodeName_ == 'Manga':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Manga')
            value_ = self.gds_validate_string(value_, node, 'Manga')
            self.Manga = value_
            self.Manga_nsprefix_ = child_.prefix
            # validate type Manga
            self.validate_Manga(self.Manga)
        elif nodeName_ == 'Characters':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Characters')
            value_ = self.gds_validate_string(value_, node, 'Characters')
            self.Characters = value_
            self.Characters_nsprefix_ = child_.prefix
        elif nodeName_ == 'Teams':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Teams')
            value_ = self.gds_validate_string(value_, node, 'Teams')
            self.Teams = value_
            self.Teams_nsprefix_ = child_.prefix
        elif nodeName_ == 'Locations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Locations')
            value_ = self.gds_validate_string(value_, node, 'Locations')
            self.Locations = value_
            self.Locations_nsprefix_ = child_.prefix
        elif nodeName_ == 'ScanInformation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ScanInformation')
            value_ = self.gds_validate_string(value_, node, 'ScanInformation')
            self.ScanInformation = value_
            self.ScanInformation_nsprefix_ = child_.prefix
        elif nodeName_ == 'StoryArc':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StoryArc')
            value_ = self.gds_validate_string(value_, node, 'StoryArc')
            self.StoryArc = value_
            self.StoryArc_nsprefix_ = child_.prefix
        elif nodeName_ == 'StoryArcNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StoryArcNumber')
            value_ = self.gds_validate_string(value_, node, 'StoryArcNumber')
            self.StoryArcNumber = value_
            self.StoryArcNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeriesGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SeriesGroup')
            value_ = self.gds_validate_string(value_, node, 'SeriesGroup')
            self.SeriesGroup = value_
            self.SeriesGroup_nsprefix_ = child_.prefix
        elif nodeName_ == 'AgeRating':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AgeRating')
            value_ = self.gds_validate_string(value_, node, 'AgeRating')
            self.AgeRating = value_
            self.AgeRating_nsprefix_ = child_.prefix
            # validate type AgeRating
            self.validate_AgeRating(self.AgeRating)
        elif nodeName_ == 'Pages':
            obj_ = ArrayOfComicPageInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Pages = obj_
            obj_.original_tagname_ = 'Pages'
        elif nodeName_ == 'CommunityRating' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CommunityRating')
            fval_ = self.gds_validate_decimal(fval_, node, 'CommunityRating')
            self.CommunityRating = fval_
            self.CommunityRating_nsprefix_ = child_.prefix
            # validate type Rating
            self.validate_Rating(self.CommunityRating)


# end class ComicInfo


class ArrayOfComicPageInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Page=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Page is None:
            self.Page = []
        else:
            self.Page = Page
        self.Page_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfComicPageInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfComicPageInfo.subclass:
            return ArrayOfComicPageInfo.subclass(*args_, **kwargs_)
        else:
            return ArrayOfComicPageInfo(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Page(self):
        return self.Page

    def set_Page(self, Page):
        self.Page = Page

    def add_Page(self, value):
        self.Page.append(value)

    def insert_Page_at(self, index, value):
        self.Page.insert(index, value)

    def replace_Page_at(self, index, value):
        self.Page[index] = value

    def _hasContent(self):
        if (
                self.Page
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfComicPageInfo',
               pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfComicPageInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ArrayOfComicPageInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayOfComicPageInfo')
        if self._hasContent():
            outfile.write('>%s' % (eol_,))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArrayOfComicPageInfo',
                                 pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArrayOfComicPageInfo'):
        pass

    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfComicPageInfo',
                        fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Page_ in self.Page:
            namespaceprefix_ = self.Page_nsprefix_ + ':' if (UseCapturedNS_ and self.Page_nsprefix_) else ''
            Page_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Page', pretty_print=pretty_print)

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def _buildAttributes(self, node, attrs, already_processed):
        pass

    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Page':
            obj_ = ComicPageInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Page.append(obj_)
            obj_.original_tagname_ = 'Page'


# end class ArrayOfComicPageInfo


class ComicPageInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Image=None, Type='Story', DoublePage=False, ImageSize=0, Key='', Bookmark='', ImageWidth=-1,
                 ImageHeight=-1, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Image = _cast(int, Image)
        self.Image_nsprefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.DoublePage = _cast(bool, DoublePage)
        self.DoublePage_nsprefix_ = None
        self.ImageSize = _cast(int, ImageSize)
        self.ImageSize_nsprefix_ = None
        self.Key = _cast(None, Key)
        self.Key_nsprefix_ = None
        self.Bookmark = _cast(None, Bookmark)
        self.Bookmark_nsprefix_ = None
        self.ImageWidth = _cast(int, ImageWidth)
        self.ImageWidth_nsprefix_ = None
        self.ImageHeight = _cast(int, ImageHeight)
        self.ImageHeight_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComicPageInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComicPageInfo.subclass:
            return ComicPageInfo.subclass(*args_, **kwargs_)
        else:
            return ComicPageInfo(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Image(self):
        return self.Image

    def set_Image(self, Image):
        self.Image = Image

    def get_Type(self):
        return self.Type

    def set_Type(self, Type):
        self.Type = Type

    def get_DoublePage(self):
        return self.DoublePage

    def set_DoublePage(self, DoublePage):
        self.DoublePage = DoublePage

    def get_ImageSize(self):
        return self.ImageSize

    def set_ImageSize(self, ImageSize):
        self.ImageSize = ImageSize

    def get_Key(self):
        return self.Key

    def set_Key(self, Key):
        self.Key = Key

    def get_Bookmark(self):
        return self.Bookmark

    def set_Bookmark(self, Bookmark):
        self.Bookmark = Bookmark

    def get_ImageWidth(self):
        return self.ImageWidth

    def set_ImageWidth(self, ImageWidth):
        self.ImageWidth = ImageWidth

    def get_ImageHeight(self):
        return self.ImageHeight

    def set_ImageHeight(self, ImageHeight):
        self.ImageHeight = ImageHeight

    def validate_ComicPageType(self, value):
        # Validate type ComicPageType, a restriction on xs:string.
        pass

    def _hasContent(self):
        # noinspection PyUnreachableCode
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ComicPageInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ComicPageInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ComicPageInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ComicPageInfo')
        if self._hasContent():
            outfile.write('>%s' % (eol_,))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ComicPageInfo',
                                 pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ComicPageInfo'):
        if self.Image is not None and 'Image' not in already_processed:
            already_processed.add('Image')
            outfile.write(' Image="%s"' % self.gds_format_integer(self.Image, input_name='Image'))
        if self.Type != "Story" and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(
                ' Type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Type), input_name='Type')),))
        if self.DoublePage and 'DoublePage' not in already_processed:
            already_processed.add('DoublePage')
            outfile.write(' DoublePage="%s"' % self.gds_format_boolean(self.DoublePage, input_name='DoublePage'))
        if self.ImageSize != 0 and 'ImageSize' not in already_processed:
            already_processed.add('ImageSize')
            outfile.write(' ImageSize="%s"' % self.gds_format_integer(self.ImageSize, input_name='ImageSize'))
        if self.Key != "" and 'Key' not in already_processed:
            already_processed.add('Key')
            outfile.write(
                ' Key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Key), input_name='Key')),))
        if self.Bookmark != "" and 'Bookmark' not in already_processed:
            already_processed.add('Bookmark')
            outfile.write(' Bookmark=%s' % (
                self.gds_encode(self.gds_format_string(quote_attrib(self.Bookmark), input_name='Bookmark')),))
        if self.ImageWidth != -1 and 'ImageWidth' not in already_processed:
            already_processed.add('ImageWidth')
            outfile.write(' ImageWidth="%s"' % self.gds_format_integer(self.ImageWidth, input_name='ImageWidth'))
        if self.ImageHeight != -1 and 'ImageHeight' not in already_processed:
            already_processed.add('ImageHeight')
            outfile.write(' ImageHeight="%s"' % self.gds_format_integer(self.ImageHeight, input_name='ImageHeight'))

    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ComicPageInfo',
                        fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Image', node)
        if value is not None and 'Image' not in already_processed:
            already_processed.add('Image')
            self.Image = self.gds_parse_integer(value, node, 'Image')
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
            self.validate_ComicPageType(self.Type.split())  # validate type ComicPageType
        value = find_attr_value_('DoublePage', node)
        if value is not None and 'DoublePage' not in already_processed:
            already_processed.add('DoublePage')
            if value in ('true', '1'):
                self.DoublePage = True
            elif value in ('false', '0'):
                self.DoublePage = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('ImageSize', node)
        if value is not None and 'ImageSize' not in already_processed:
            already_processed.add('ImageSize')
            self.ImageSize = self.gds_parse_integer(value, node, 'ImageSize')
        value = find_attr_value_('Key', node)
        if value is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            self.Key = value
        value = find_attr_value_('Bookmark', node)
        if value is not None and 'Bookmark' not in already_processed:
            already_processed.add('Bookmark')
            self.Bookmark = value
        value = find_attr_value_('ImageWidth', node)
        if value is not None and 'ImageWidth' not in already_processed:
            already_processed.add('ImageWidth')
            self.ImageWidth = self.gds_parse_integer(value, node, 'ImageWidth')
        value = find_attr_value_('ImageHeight', node)
        if value is not None and 'ImageHeight' not in already_processed:
            already_processed.add('ImageHeight')
            self.ImageHeight = self.gds_parse_integer(value, node, 'ImageHeight')

    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass


# end class ComicPageInfo


GDSClassesMapping = {
    'ComicInfo': ComicInfo,
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComicInfo'
        rootClass = ComicInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComicInfo'
        rootClass = ComicInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True,doRecover=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser,doRecover)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComicInfo'
        rootClass = ComicInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComicInfo'
        rootClass = ComicInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from ComicInfo import *\n\n')
        sys.stdout.write('import ComicInfo as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    # import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {}

__all__ = [
    "ArrayOfComicPageInfo",
    "ComicInfo",
    "ComicPageInfo"
]
